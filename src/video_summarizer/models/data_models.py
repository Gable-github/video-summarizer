"""
Data models for the video summarizer application.

This module contains Pydantic models that define the structure of data
used throughout the application.
"""

from datetime import datetime
from pathlib import Path
from typing import List, Optional, Dict, Any
from enum import Enum

from pydantic import BaseModel, Field, HttpUrl, validator


class QualityLevel(str, Enum):
    """Quality levels for processing."""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"


class ProcessingStage(str, Enum):
    """Processing stages for progress tracking."""
    DOWNLOADING = "downloading"
    KEYFRAME_EXTRACTION = "keyframe_extraction"
    AUDIO_EXTRACTION = "audio_extraction"
    TRANSCRIPTION = "transcription"
    TOPIC_SUMMARIZATION = "topic_summarization"
    LLM_PROCESSING = "llm_processing"
    MARKDOWN_GENERATION = "markdown_generation"
    COMPLETED = "completed"


class VideoMetadata(BaseModel):
    """Metadata about the video being processed."""
    title: str
    description: Optional[str] = None
    duration: Optional[int] = None  # Duration in seconds
    upload_date: Optional[str] = None
    uploader: Optional[str] = None
    view_count: Optional[int] = None
    url: str
    video_id: str
    thumbnail_url: Optional[str] = None


class Keyframe(BaseModel):
    """Represents a keyframe extracted from the video."""
    timestamp: float  # Timestamp in seconds
    image_path: Path
    description: Optional[str] = None
    confidence_score: Optional[float] = None
    source_video: Optional[str] = None  # Source video filename
    
    class Config:
        arbitrary_types_allowed = True


class TranscriptSegment(BaseModel):
    """A segment of the video transcript."""
    start_time: float
    end_time: float
    text: str
    confidence: Optional[float] = None
    speaker: Optional[str] = None


class TopicSummary(BaseModel):
    """Summary of a topic discussed in the video."""
    topic: str
    start_time: float
    end_time: float
    summary: str
    key_points: List[str] = Field(default_factory=list)
    relevance_score: Optional[float] = None


class LLMSummary(BaseModel):
    """Complete summary generated by the LLM."""
    executive_summary: str
    key_insights: List[str] = Field(default_factory=list)
    main_topics: List[str] = Field(default_factory=list)
    detailed_summary: str
    recommendations: Optional[List[str]] = None
    metadata: Dict[str, Any] = Field(default_factory=dict)


class VideoSummaryResult(BaseModel):
    """Complete result of video processing."""
    video_metadata: VideoMetadata
    keyframes: List[Keyframe] = Field(default_factory=list)
    transcript_segments: List[TranscriptSegment] = Field(default_factory=list)
    topic_summaries: List[TopicSummary] = Field(default_factory=list)
    llm_summary: Optional[LLMSummary] = None
    processing_time: Optional[float] = None
    created_at: datetime = Field(default_factory=datetime.now)
    output_file_path: Optional[Path] = None
    
    class Config:
        arbitrary_types_allowed = True


class VideoSummaryConfig(BaseModel):
    """Configuration for video processing."""
    youtube_url: str
    output_dir: Path = Field(default=Path('./output'))
    quality: QualityLevel = QualityLevel.MEDIUM
    model: str = Field(default='gpt-3.5-turbo')
    verbose: bool = Field(default=False)
    open_result: bool = Field(default=False)
    config_file: Optional[Path] = None
    
    # Processing options
    max_keyframes: int = Field(default=20, ge=1, le=100)
    keyframe_interval: Optional[float] = None  # Seconds between keyframes
    include_transcript: bool = Field(default=True)
    include_topics: bool = Field(default=True)
    
    # API configurations
    openai_api_key: Optional[str] = None
    openai_base_url: Optional[str] = None
    
    # Output options
    output_format: str = Field(default='markdown')
    include_images: bool = Field(default=True)
    image_format: str = Field(default='png')
    
    class Config:
        arbitrary_types_allowed = True
    
    @validator('youtube_url')
    def validate_youtube_url(cls, v):
        """Validate that the URL is a YouTube URL."""
        youtube_domains = ['youtube.com', 'youtu.be', 'www.youtube.com', 'm.youtube.com']
        if not any(domain in v.lower() for domain in youtube_domains):
            raise ValueError('Must be a valid YouTube URL')
        return v
    
    @validator('output_dir')
    def validate_output_dir(cls, v):
        """Ensure output directory is a Path object."""
        if isinstance(v, str):
            return Path(v)
        return v


class ProcessingProgress(BaseModel):
    """Progress tracking for video processing."""
    stage: ProcessingStage
    progress_percentage: float = Field(ge=0, le=100)
    message: str
    details: Optional[Dict[str, Any]] = None
    timestamp: datetime = Field(default_factory=datetime.now)


class ErrorInfo(BaseModel):
    """Information about processing errors."""
    stage: ProcessingStage
    error_type: str
    error_message: str
    traceback: Optional[str] = None
    timestamp: datetime = Field(default_factory=datetime.now)
    recoverable: bool = Field(default=False) 